name: CI
on: push

env:
  CONDA_ENV_NAME: etspy

jobs:
  format-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: abatilo/actions-poetry@v3.0.0
      - run: poetry install --only=dev
      - run: poetry run isort . --check
      - run: poetry run ruff check

  # pytest:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: aaherzing/etspy:latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Install ETSpy
  #     run: pip install
  #   - name: Run docstring example tests
  #     run: pytest --doctest-modules --ignore=etspy/tests etspy/ 
  #   - name: Run full test suite
  #     if: always()
  #     run: pytest etspy/tests/
  conda-pytest:
    name: "conda pytest: (${{ matrix.python-version }}, ${{ matrix.os }}, with-cuda: ${{ matrix.with-cuda }})"
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.10", "3.11", "3.12"]
        with-cuda: [true, false]
    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: ${{env.CONDA_ENV_NAME}}
          environment-file: resources/etspy-dev.yml
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          auto-activate-base: false
      - name: Install CUDA Toolkit
        if: ${{ matrix.with-cuda }}
        uses: Jimver/cuda-toolkit@v0.2.17
      - name: Conda info
        run: conda info
      - name: Conda list
        run: conda list
      - name: Install etspy development
        run: which pip && pip install -e ./
      - name: Run docstring example tests
        run: pytest --doctest-modules --ignore=etspy/tests etspy/ 
      - name: Run full test suite
        if: always()
        run: pytest etspy/tests/